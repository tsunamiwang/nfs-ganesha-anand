As part of the new API cleanup, I am removing no longer used or
otherwise problematic types.  This is as much for my personal
reference in keeping a record of what I'm getting rid of as it is
documentation.

In general, stdint.h is preferred, and we should use it so we don't
get Nasty Surprises when someone tries to use this stuff on a 32 bit
platform.

Removed:
  * u_int32_t
  * u_int16_t
  * u_int64_t
  * fsal_u64_t
  * fsal_uint_t
  * fsal_ushort_t
   - Use stdint.h instead.

  * fsal_boolean_t
    - Use bool_t for now.  Our XDR library defines bool_t and lots of
      stuff uses it.  The C99 'bool' type would be nice, but
      theoretical cleanliness probably isn't worth the trouble.

  * fsal_off_t
    - Use uint64_t.

  * fsal_size_t
  * fsal_mdsize_t
  * fsal_count_t
    - What to use instead depends on the object being measured.  For
      objects in memory (buffer sizes and so forth) use size_t.  For
      the lengths of files, use uint64_t.  For things like read/write
      counts, use uint32_t (size NFSv4 specifies a 32 bit count4 for
      those.)  For array counts, use size_t or ptrdiff_t.  (CERT's C
      coding guidelines recommend size_t for array counts and
      indices.)

  * fsal_uid_t
  * fsal_gid_t
    - uint64_t

  * fsal_accessmode_t
    - uint32_t

  * fsal_name_t
  * fsal_path_t
    - Use a char* or potentially a counted buffer.

  * Modes Constants
    - These are just yet another mirroring.

  * fsal_extattrib_list
    - There is no reason for this structure to exist.  This is
      precisely why you have attribute masks and similar.
  
  * fsal_statistics_t
  * func_fsal_stats_t
    - Not used in the new API.  Plus they gobbled up a bunch of memory
      and time and imposed a concurrency bottleneck.

  * struct fsal_handle_desc
  * fsal_buffdesc_t
    - Use gsh_buffdesc instead.  As Jim Lieb pointed out, there are a
      lot of types in ganesha that serve the purpose of describing a
      counted buffer, and they should be united at some point.  This
      also substitutes a void* for a caddr_t so we don't have to cast
      everything.

Renamed/modified:
  * fsal_time_time
    - Since this is used all over the place, take it out of the FSAL.
      Also, while a 64-bit second count (to prevent Y2.038K bugs) is
      required, there are less than 2³²-1 nanoseconds in a second, so
      there's no reason for that to be more than 32 bits.

  * Attribute mask bits.
    - Make these constants, so we don't have all those ugly defines
      with casts.  I think we actually should keep this type so we can
      upgrade it to a struct containing an array or similar if we find
      we need more than 64.  And we should use the mask macros
      consistently.  Remove the FSAL prefix, since these are used all
      over, from the the innermost workings of the FSAL right up to
      the functions in Protocol.

   * fsal_attrib_list_t
     - This is used far outside the FSAL.

  * fsal_init_info_t
    - This structure held the maximum number of calls to the FSAL,
      which, if it is implemented at all, should be FSAL internal.

Considered for removal/relocation:

  * fsal_staticfsinfo_t
    - The new API removes the need for this globally defined data
      structure, using a set of functions that can query the FSAL
      instead.  Some new FSALs use it, but we should probably remove
      it from fsal.h and either make it FSAL private for those that
      want it, or incorporate it into

  * ACL types
    - These seem to be just a mirror of the NFSv4 ACL types.  I asked
      Frank Filz and he agreed that if nothing else all the constants
      should be removed and the NFSv4 ones used instead.

  * fsal_fhextype_t
    - This is not really well supported anywhere in Ganesha, and I am
      unaware of clients that support it.

